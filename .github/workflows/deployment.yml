name: "frontend Deployment"

on:
  push:
    branches:
      - prod
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract deployment tag
        id: extract-tag
        run: |
          TAG="${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Deployment tag: ${TAG}"

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }}
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [ build ]
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    outputs:
      image-name: ${{ needs.build.outputs.image-name }}
      image-digest: ${{ needs.build.outputs.image-digest }}
    strategy:
      matrix:
        service: [ frontend-service ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image reference
        id: image-ref
        run: |
          # Use image digest for exact reference to the built image
          IMAGE_REF="${{ needs.build.outputs.image-name }}@${{ needs.build.outputs.image-digest }}"
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Using image reference: ${IMAGE_REF}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.image-ref }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          skip-files: '/usr/local/bundle/gems/**'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-${{ matrix.service }}-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "SARIF file found"
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found"
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          category: 'trivy-${{ matrix.service }}'

  deploy:
    runs-on: ubuntu-latest
    needs: [ security-scan ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set image reference
        id: image-ref
        run: |
          IMAGE_REF="${{ needs.security-scan.outputs.image-name }}@${{ needs.security-scan.outputs.image-digest }}"
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Deploying image: ${IMAGE_REF}"

      - name: Set up environment variables from secrets
        run: |
          echo "Setting up environment variables from secrets"
          echo "NODE_ENV=${{ secrets.NODE_ENV || 'production' }}" >> .env
          echo "IMAGE_URL=${{ steps.image-ref.outputs.image-ref }}" >> .env

      - name: Add VPS host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Only copy src files if we're not rebuilding but need to update
      - name: Copy all files files to VPS
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p ~/frontend-service/deploy"
          scp -r .env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/frontend-service/
          scp -r docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/frontend-service/

      - name: Update Image
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/frontend-service && export $(cat .env | xargs) && envsubst < docker-compose.yml > docker-compose.yml.tmp && mv docker-compose.yml.tmp docker-compose.yml"

      - name: Deploy or Restart Service on VPS
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/frontend-service && docker compose -f docker-compose.yml --env-file .env up -d frontend"